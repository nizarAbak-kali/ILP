# -*- coding: utf-8 -*-
# ******************************************************************
# ILP - Implantation d'un langage de programmation.
# Copyright (C) 2004 <Christian.Queinnec@lip6.fr>
# $Id: grammar1.rnc 477 2006-09-29 13:23:48Z queinnec $
# GPL version>=2
# ******************************************************************

# Première version du langage étudié: ILP1 pour « Innocent Langage
# Parachuté. » Il sera complété dans les cours qui suivent.

start = programme1

programme1 = element programme1 {
   instructions
}

instructions = instruction

# Ce langage est un langage d'instructions, assez réduit pour
# l'instant. Voici les instructions possibles:

instruction =
   alternative
 | sequence
 | blocUnaire
 | expression

# Le si-alors-sinon. L'alternant est facultatif car c'est un langage
# d'instructions.

alternative = element alternative {
   element condition   { expression },
   element consequence { instructions },
   element alternant   { instructions } ?
}

# La séquence qui permet de regrouper plusieurs instructions en une seule.
# Il est obligatoire qu'il y ait au moins une instruction dans la séquence.

sequence = element sequence {
   instructions
}

# Un bloc local unaire. C'est, pour l'instant, la seule construction
# permettant d'introduire une variable localement. Elle sera bientôt remplacée
# par une construction permettant d'introduire plusieurs variables
# locales en meme temps.

blocUnaire = element blocUnaire {
   variable,
   element valeur { expression },
   element corps  { instructions }
}

# Comme en C, une expression est une instruction dont la valeur est
# ignorée. Il n'y a pas d'expression parenthésée car ce n'est qu'une
# fioriture syntaxique. Les expressions sont:

expression =
   constante
 | variable
 | operation
 | invocationPrimitive

# Une variable n'est caractérisée que par son nom. Les variables dont
# les noms comportent la séquence ilp ou ILP sont réservés et ne
# peuvent être utilisés par les programmeurs.
# FUTUR: restreindre plus les noms de variables aux seuls caracteres normaux!

variable = element variable {
   attribute nom { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   empty
}

# L'invocation d'une fonction primitive. Une fonction primitive est
# procurée par l'implantation et ne peut (usuellement) être définie
# par l'utilisateur. Les fonctions primitives sont, pour être
# utilisables, prédéfinies. Une fonction primitive n'est caractérisée
# que par son nom (éventuellement masquable).

invocationPrimitive = element invocationPrimitive {
   attribute fonction { xsd:Name },
   expression *
}

# Les opérations sont en fait des sortes d'invocations à des fonctions
# primitives sauf que ces fonctions sont implantées par le matériel
# par des instructions particulières. On ne distingue que les
# opérations unaires et binaires (les plus usuelles):

operation =
   operationUnaire
 | operationBinaire

operationUnaire = element operationUnaire {
   attribute operateur { "-" | "!" },
   element operande { expression }
}
operationBinaire = element operationBinaire {
   element operandeGauche { expression },
   attribute operateur {
      "+" | "-" | "*" | "/" | "%" |                      # arithmétiques
      "|" | "&" | "^" |                                  # booléens
      "<" | "<=" | "==" | ">=" | ">" | "<>" | "!="       # comparaisons
   },
   element operandeDroit { expression }
}

# Les constantes sont les données qui peuvent apparaître dans les
# programmes sous forme textuelle (ou littérale comme l'on dit
# souvent). Ici l'on trouve toutes les constantes usuelles à part les
# caractères:

constante =
   element entier    {
    attribute valeur { xsd:integer },
    empty }
 | element flottant  {
    attribute valeur { xsd:float },
    empty }
 | element chaine    { text }
 | element booleen   {
    attribute valeur { "true" | "false" },
    empty }

# fin.
